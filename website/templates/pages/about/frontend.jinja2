{% extends 'base.jinja2' %}

{% block page_id %}about-frontend{% endblock %}
{% block body_class %}about{% endblock %}

{% block content %}
    <div class="inner">
        <h1>This Website</h1>
        <h2>Front End Development</h2>
        <h4>Tools</h4>
        <p>
            This page outlines the front end development environment and some of the tooling I've
            built to make it easier. I've listed some of the main tools and technologies that
            I'm using below. I'll try to keep this list updated as I add more things.
        </p>
        <div class="tools">
            <ul>
                <li><a href="https://reactjs.org/" target="_blank" rel="noopener noreferrer">React</a></li>
                <li><a href="https://jinja.palletsprojects.com/en/2.11.x/" target="_blank" rel="noopener noreferrer">Jinja</a></li>
                <li><a href="https://sass-lang.com/" target="_blank" rel="noopener noreferrer">SASS</a></li>
                <li><a href="https://www.python.org/" target="_blank" rel="noopener noreferrer">Python</a></li>
                <li><a href="https://babeljs.io/" target="_blank" rel="noopener noreferrer">Babel</a></li>
                <li><a href="http://browserify.org/" target="_blank" rel="noopener noreferrer">Browserify</a></li>
                <li><a href="https://www.npmjs.com/package/uglify-js" target="_blank" rel="noopener noreferrer">Uglify</a></li>
            </ul>
        </div>

        <p>
            One of the first things I knew I would need after my development pipeline was built
            was an easy to use front end development environment. I started with getting a nice
            developer flow going for HTML, CSS, and JavaScript, and I did this through templates
            with Jinja, SASS, and vanilla JavaScript (to start).
        </p>
        <p>
            My higher level plan was to have source directories for my Jinja templates, JavaScript files,
            and SCSS files. Independently, these would all get compiled to HTML files, a single minified
            JavaScript file, and a single CSS file in a `public/` directory. The `public/` directory would
            be the static file distribution for the website.
        </p>

        <h4>Watchers</h4>
        <a href="https://github.com/andrewseaman35/aseaman/blob/master/scripts/run_watchers.py" target="_blank">Source</a>
        <p>
            In order to make development as smooth as possible, I wrote a script that runs threaded watchers: one for Jinja templates, one for JavaScript files, and one for SCSS file. When I
            develop, I run these in the background by executing `make watch` in the `website/` directory.
            When they detect a change to any of the associated files, it'll automatically rebuild that
            set of files. For example, if the Jinja watcher detects a change to and .jinja2 file, it'll
            rebuild all the HTML files, so refreshing the page will immediatelly reflect the changes I
            made.
        </p>
        <p>
            Here's a snippet of what the output looks like when I make changes:
        </p>
        <div class="code-block">
2020-04-22 17:01:20: jinja watcher - Detected change in frontend.jinja2
2020-04-22 17:01:20: jinja watcher - Files updated
2020-04-22 17:02:38: js watcher - Detected change in DrawJasper.js
2020-04-22 17:02:43: js watcher - Files updated
2020-04-22 17:02:48: scss watcher - Detected change in _patent.scss
2020-04-22 17:02:48: scss watcher - Files updated
        </div>

        <h4>Jinja Template Rendering</h4>
        <a href="https://github.com/andrewseaman35/aseaman/blob/master/scripts/compile_html.py" target="_blank">Source</a>
        <p>
            I wanted to take advantage of templating when generating my webpages. Since the website will
            be statically hosted, the templating has to be applied as a build step of the website as
            opposed to something like server-side templating when the page is being accessed.
        </p>
        <p>
            I set up a directory for my template files (`website/templates/`) and a subdirectory
            (`website/templates/pages/`) to define all the webpages. Every navigatable HTML page will have
            a corresponding .jinja file somewhere within the `pages/` subdirectory. I wrote a script (source
            <a href="https://github.com/andrewseaman35/aseaman/blob/master/scripts/compile_html.py" target="_blank">here</a>) that files all the .jinja2 files in `pages/` and renders the templates to the
            corresponding location in `public/`. Since the website is statically hosted on AWS, the URLs for
            the pages is the same as the path to the file.
        </p>

        <p class="still-interested">
            <strong>
                Still interested? Go back to the
                {{ macros.link_to("about/index.html", "page about this website")}}
                and check out how other things work!
            </strong>
        </p>
    </div>
{% endblock %}
