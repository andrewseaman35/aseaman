AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  Branch:
    Description: branch being deployed
    Type: String
  DeployEnv:
    Description: environment to deploy to
    Type: String
  ApiUrl:
    Description: API Url for custom domain and DNS record set
    Type: String
  StateApiName:
    Description: State API Lambda function name
    Type: String
  DrawJasperApiName:
    Description: DrawJasper API Lambda function name
    Type: String
  WhiskyApiName:
    Description: Whisky API Lambda function name
    Type: String
  SaltLevelApiName:
    Description: Salt Level API Lambda function name
    Type: String
  CompareACNHApiName:
    Description: Compare ACNH API Lambda function name
    Type: String
  HostedZoneId:
    Description: Hosted zone id
    Type: String
  ApiCertificateId:
    Description: Certificate id for API
    Type: String

Resources:
  StateAPIRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "logs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: "arn:aws:logs:*:*:*"
        -
          PolicyName: "statetable"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:GetItem"
                Resource: !Sub
                  - "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${StateTable}"
                  - { StateTable: "states" }
        -
          PolicyName: "ssm"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameter"
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
  StateAPIPolicy:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          Ref: "StateAPIRole"
  StateAPIFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: aseaman-lambda-functions
        S3Key: !Join
          - ''
          - - !Ref DeployEnv
            - '/'
            - !Ref StateApiName
            - '.zip'
      Description: State API Lambda function
      FunctionName: !Ref StateApiName
      Handler: lambda_handler.lambda_handler
      Role : !GetAtt StateAPIRole.Arn
      Runtime: python3.6
      Timeout: 10
  StateAPIPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName:
        Fn::GetAtt:
          - StateAPIFunction
          - Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":"
            - Ref: "RestAPI"
            - "/*"

  WhiskyAPIRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "logs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: "arn:aws:logs:*:*:*"
        -
          PolicyName: "whisky-shelf-table"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:Scan"
                Resource: !Sub
                    - "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${WhiskyTable}"
                    - { WhiskyTable: "whisky" }
        -
          PolicyName: "ssm"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameter"
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
  WhiskyAPIPolicy:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          Ref: "WhiskyAPIRole"
  WhiskyAPIFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: aseaman-lambda-functions
        S3Key: !Join
          - ''
          - - !Ref DeployEnv
            - '/'
            - !Ref WhiskyApiName
            - '.zip'
      Description: Lambda function for Whisky API
      FunctionName: !Ref WhiskyApiName
      Handler: lambda_handler.lambda_handler
      Role : !GetAtt WhiskyAPIRole.Arn
      Runtime: python3.6
      Timeout: 10
  WhiskyAPIPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName:
        Fn::GetAtt:
          - WhiskyAPIFunction
          - Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":"
            - Ref: "RestAPI"
            - "/*"

  DrawJasperAPIRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "logs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: "arn:aws:logs:*:*:*"
        -
          PolicyName: "ssm"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameter"
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
        -
          PolicyName: "s3"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:ListBucket"
                  - "s3:GetObject"
                Resource:
                  - !Sub "arn:aws:s3:::aseaman-public-bucket"
                  - !Sub "arn:aws:s3:::aseaman-public-bucket/aseaman/images/jasper/*"
  DrawJasperAPIPolicy:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          Ref: "DrawJasperAPIRole"
  DrawJasperAPIFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: aseaman-lambda-functions
        S3Key: !Join
          - ''
          - - !Ref DeployEnv
            - '/'
            - !Ref DrawJasperApiName
            - '.zip'
      Description: DrawJasper API Lambda function
      FunctionName: !Ref DrawJasperApiName
      Handler: lambda_handler.lambda_handler
      Role : !GetAtt DrawJasperAPIRole.Arn
      Runtime: python3.6
      Timeout: 30
  DrawJasperAPIPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName:
        Fn::GetAtt:
          - DrawJasperAPIFunction
          - Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":"
            - Ref: "RestAPI"
            - "/*"

  SaltLevelAPIRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "logs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: "arn:aws:logs:*:*:*"
        -
          PolicyName: "ssm"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameter"
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
        -
          PolicyName: "salt-level-table"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:Scan"
                Resource: !Sub
                    - "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SaltLevelTable}"
                    - { SaltLevelTable: "salt_level" }
  SaltLevelAPIPolicy:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          Ref: "SaltLevelAPIRole"
  SaltLevelAPIFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: aseaman-lambda-functions
        S3Key: !Join
          - ''
          - - !Ref DeployEnv
            - '/'
            - !Ref SaltLevelApiName
            - '.zip'
      Description: SaltLevel API Lambda function
      FunctionName: !Ref SaltLevelApiName
      Handler: lambda_handler.lambda_handler
      Role : !GetAtt SaltLevelAPIRole.Arn
      Runtime: python3.6
      Timeout: 30
  SaltLevelAPIPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName:
        Fn::GetAtt:
          - SaltLevelAPIFunction
          - Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":"
            - Ref: "RestAPI"
            - "/*"

  CompareACNHAPIRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "logs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: "arn:aws:logs:*:*:*"
        -
          PolicyName: "ssm"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameter"
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
        -
          PolicyName: "anch-result-table"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:Scan"
                Resource: !Sub
                    - "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompareACNHResultTable}"
                    - { CompareACNHResultTable: "compare_acnh_results" }
        -
          PolicyName: "anch-summary-table"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:Scan"
                Resource: !Sub
                    - "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CompareACNHResultTable}"
                    - { CompareACNHResultTable: "compare_acnh_summary" }
  CompareACNHAPIPolicy:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          Ref: "SaltLevelAPIRole"
  CompareACNHAPIFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: aseaman-lambda-functions
        S3Key: !Join
          - ''
          - - !Ref DeployEnv
            - '/'
            - !Ref CompareACNHApiName
            - '.zip'
      Description: Compare ACNH API Lambda function
      FunctionName: !Ref CompareACNHApiName
      Handler: lambda_handler.lambda_handler
      Role : !GetAtt CompareACNHAPIRole.Arn
      Runtime: python3.6
      Timeout: 30
  CompareACNHAPIPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName:
        Fn::GetAtt:
          - CompareACNHAPIFunction
          - Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":"
            - Ref: "RestAPI"
            - "/*"

  RestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Fn::Join:
          - ""
          - - "aseaman-website-api-"
            - !Ref DeployEnv
            - "-"
            - !Ref Branch

  StateAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestAPI
      ParentId:
        Fn::GetAtt:
          - RestAPI
          - RootResourceId
      PathPart: state_check
  StateAPIGetMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: RestAPI
      ResourceId:
        Ref: StateAPIResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ""
          - - "arn:aws:apigateway:"
            - Ref: "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt:
              - StateAPIFunction
              - Arn
            - "/invocations"
        IntegrationResponses:
        - ResponseTemplates:
            application/json: "$input.json('$.body')"
          StatusCode: 200
        - SelectionPattern: "^not found.*"
          ResponseTemplates:
            application/json: "{}"
          StatusCode: 404
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: "{\"fun\": \"getUser\", \"parameters\": {\"userId\": \"$input.params('userId')\"}}"
      RequestParameters:
        method.request.path.userId: 'true'
      MethodResponses:
      - StatusCode: 200
      - StatusCode: 404
  StateAPIPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: RestAPI
      ResourceId:
        Ref: StateAPIResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ""
          - - "arn:aws:apigateway:"
            - Ref: "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt:
              - StateAPIFunction
              - Arn
            - "/invocations"
        IntegrationResponses:
        - ResponseTemplates:
            application/json: "$input.json('$.body')"
          StatusCode: 200
        - SelectionPattern: "^not found.*"
          ResponseTemplates:
            application/json: "{}"
          StatusCode: 404
        PassthroughBehavior: NEVER
      RequestParameters:
        method.request.path.userId: 'true'
      MethodResponses:
      - StatusCode: 200
      - StatusCode: 404
  StateAPIOptionsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: RestAPI
      ResourceId:
        Ref: StateAPIResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ""
          - - "arn:aws:apigateway:"
            - Ref: "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt:
              - StateAPIFunction
              - Arn
            - "/invocations"
        IntegrationResponses:
        - ResponseTemplates:
            application/json: "$input.json('$.body')"
          StatusCode: 200
        - SelectionPattern: "^not found.*"
          ResponseTemplates:
            application/json: "{}"
          StatusCode: 404
        PassthroughBehavior: NEVER
      RequestParameters:
        method.request.path.userId: 'true'
      MethodResponses:
      - StatusCode: 200
      - StatusCode: 403
      - StatusCode: 404

  SaltLevelAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestAPI
      ParentId:
        Fn::GetAtt:
          - RestAPI
          - RootResourceId
      PathPart: salt_level
  SaltLevelAPIGetMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: RestAPI
      ResourceId:
        Ref: SaltLevelAPIResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ""
          - - "arn:aws:apigateway:"
            - Ref: "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt:
              - SaltLevelAPIFunction
              - Arn
            - "/invocations"
        IntegrationResponses:
        - ResponseTemplates:
            application/json: "$input.json('$.body')"
          StatusCode: 200
        - SelectionPattern: "^not found.*"
          ResponseTemplates:
            application/json: "{}"
          StatusCode: 404
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: "{\"fun\": \"getUser\", \"parameters\": {\"userId\": \"$input.params('userId')\"}}"
      RequestParameters:
        method.request.path.userId: 'true'
      MethodResponses:
      - StatusCode: 200
      - StatusCode: 404
  SaltLevelAPIPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: RestAPI
      ResourceId:
        Ref: SaltLevelAPIResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ""
          - - "arn:aws:apigateway:"
            - Ref: "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt:
              - SaltLevelAPIFunction
              - Arn
            - "/invocations"
        IntegrationResponses:
        - ResponseTemplates:
            application/json: "$input.json('$.body')"
          StatusCode: 200
        - SelectionPattern: "^not found.*"
          ResponseTemplates:
            application/json: "{}"
          StatusCode: 404
        PassthroughBehavior: NEVER
      RequestParameters:
        method.request.path.userId: 'true'
      MethodResponses:
      - StatusCode: 200
      - StatusCode: 404
  SaltLevelAPIOptionsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: RestAPI
      ResourceId:
        Ref: SaltLevelAPIResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ""
          - - "arn:aws:apigateway:"
            - Ref: "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt:
              - SaltLevelAPIFunction
              - Arn
            - "/invocations"
        IntegrationResponses:
        - ResponseTemplates:
            application/json: "$input.json('$.body')"
          StatusCode: 200
        - SelectionPattern: "^not found.*"
          ResponseTemplates:
            application/json: "{}"
          StatusCode: 404
        PassthroughBehavior: NEVER
      RequestParameters:
        method.request.path.userId: 'true'
      MethodResponses:
      - StatusCode: 200
      - StatusCode: 403
      - StatusCode: 404

  DrawJasperAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestAPI
      ParentId:
        Fn::GetAtt:
          - RestAPI
          - RootResourceId
      PathPart: draw_jasper
  DrawJasperAPIGetMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: RestAPI
      ResourceId:
        Ref: DrawJasperAPIResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ""
          - - "arn:aws:apigateway:"
            - Ref: "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt:
              - DrawJasperAPIFunction
              - Arn
            - "/invocations"
        IntegrationResponses:
        - ResponseTemplates:
            application/json: "$input.json('$.body')"
          StatusCode: 200
        - SelectionPattern: "^not found.*"
          ResponseTemplates:
            application/json: "{}"
          StatusCode: 404
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: "{\"fun\": \"getUser\", \"parameters\": {\"userId\": \"$input.params('userId')\"}}"
      RequestParameters:
        method.request.path.userId: 'true'
      MethodResponses:
      - StatusCode: 200
      - StatusCode: 404
  DrawJasperAPIPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: RestAPI
      ResourceId:
        Ref: DrawJasperAPIResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ""
          - - "arn:aws:apigateway:"
            - Ref: "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt:
              - DrawJasperAPIFunction
              - Arn
            - "/invocations"
        IntegrationResponses:
        - ResponseTemplates:
            application/json: "$input.json('$.body')"
          StatusCode: 200
        - SelectionPattern: "^not found.*"
          ResponseTemplates:
            application/json: "{}"
          StatusCode: 404
        PassthroughBehavior: NEVER
      RequestParameters:
        method.request.path.userId: 'true'
      MethodResponses:
      - StatusCode: 200
      - StatusCode: 404
  DrawJasperAPIOptionsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: RestAPI
      ResourceId:
        Ref: DrawJasperAPIResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ""
          - - "arn:aws:apigateway:"
            - Ref: "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt:
              - DrawJasperAPIFunction
              - Arn
            - "/invocations"
        IntegrationResponses:
        - ResponseTemplates:
            application/json: "$input.json('$.body')"
          StatusCode: 200
        - SelectionPattern: "^not found.*"
          ResponseTemplates:
            application/json: "{}"
          StatusCode: 404
        PassthroughBehavior: NEVER
      RequestParameters:
        method.request.path.userId: 'true'
      MethodResponses:
      - StatusCode: 200
      - StatusCode: 403
      - StatusCode: 404

  WhiskyAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestAPI
      ParentId:
        Fn::GetAtt:
          - RestAPI
          - RootResourceId
      PathPart: whisky
  WhiskyAPIGetMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: RestAPI
      ResourceId:
        Ref: WhiskyAPIResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ""
          - - "arn:aws:apigateway:"
            - Ref: "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt:
              - WhiskyAPIFunction
              - Arn
            - "/invocations"
        IntegrationResponses:
        - ResponseTemplates:
            application/json: "$input.json('$.body')"
          StatusCode: 200
        - SelectionPattern: "^not found.*"
          ResponseTemplates:
            application/json: "{}"
          StatusCode: 404
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: "{\"fun\": \"getUser\", \"parameters\": {\"userId\": \"$input.params('userId')\"}}"
      RequestParameters:
        method.request.path.userId: 'true'
      MethodResponses:
      - StatusCode: 200
      - StatusCode: 404
  WhiskyAPIPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: RestAPI
      ResourceId:
        Ref: WhiskyAPIResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ""
          - - "arn:aws:apigateway:"
            - Ref: "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt:
              - WhiskyAPIFunction
              - Arn
            - "/invocations"
        IntegrationResponses:
        - ResponseTemplates:
            application/json: "$input.json('$.body')"
          StatusCode: 200
        - SelectionPattern: "^not found.*"
          ResponseTemplates:
            application/json: "{}"
          StatusCode: 404
        PassthroughBehavior: NEVER
      RequestParameters:
        method.request.path.userId: 'true'
      MethodResponses:
      - StatusCode: 200
      - StatusCode: 404
  WhiskyAPIOptionsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: RestAPI
      ResourceId:
        Ref: WhiskyAPIResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ""
          - - "arn:aws:apigateway:"
            - Ref: "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt:
              - WhiskyAPIFunction
              - Arn
            - "/invocations"
        IntegrationResponses:
        - ResponseTemplates:
            application/json: "$input.json('$.body')"
          StatusCode: 200
        - SelectionPattern: "^not found.*"
          ResponseTemplates:
            application/json: "{}"
          StatusCode: 404
        PassthroughBehavior: NEVER
      RequestParameters:
        method.request.path.userId: 'true'
      MethodResponses:
      - StatusCode: 200
      - StatusCode: 403
      - StatusCode: 404

  CompareACNHAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestAPI
      ParentId:
        Fn::GetAtt:
          - RestAPI
          - RootResourceId
      PathPart: compare_acnh
  CompareACNHAPIGetMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: RestAPI
      ResourceId:
        Ref: CompareACNHAPIResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ""
          - - "arn:aws:apigateway:"
            - Ref: "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt:
              - CompareACNHAPIFunction
              - Arn
            - "/invocations"
        IntegrationResponses:
        - ResponseTemplates:
            application/json: "$input.json('$.body')"
          StatusCode: 200
        - SelectionPattern: "^not found.*"
          ResponseTemplates:
            application/json: "{}"
          StatusCode: 404
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: "{\"fun\": \"getUser\", \"parameters\": {\"userId\": \"$input.params('userId')\"}}"
      RequestParameters:
        method.request.path.userId: 'true'
      MethodResponses:
      - StatusCode: 200
      - StatusCode: 404
  CompareACNHAPIPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: RestAPI
      ResourceId:
        Ref: CompareACNHAPIResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ""
          - - "arn:aws:apigateway:"
            - Ref: "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt:
              - CompareACNHAPIFunction
              - Arn
            - "/invocations"
        IntegrationResponses:
        - ResponseTemplates:
            application/json: "$input.json('$.body')"
          StatusCode: 200
        - SelectionPattern: "^not found.*"
          ResponseTemplates:
            application/json: "{}"
          StatusCode: 404
        PassthroughBehavior: NEVER
      RequestParameters:
        method.request.path.userId: 'true'
      MethodResponses:
      - StatusCode: 200
      - StatusCode: 404
  CompareACNHAPIOptionsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: RestAPI
      ResourceId:
        Ref: CompareACNHAPIResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ""
          - - "arn:aws:apigateway:"
            - Ref: "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt:
              - CompareACNHAPIFunction
              - Arn
            - "/invocations"
        IntegrationResponses:
        - ResponseTemplates:
            application/json: "$input.json('$.body')"
          StatusCode: 200
        - SelectionPattern: "^not found.*"
          ResponseTemplates:
            application/json: "{}"
          StatusCode: 404
        PassthroughBehavior: NEVER
      RequestParameters:
        method.request.path.userId: 'true'
      MethodResponses:
      - StatusCode: 200
      - StatusCode: 403
      - StatusCode: 404

  RestAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - StateAPIGetMethod
      - StateAPIPostMethod
      - StateAPIOptionsMethod
      - DrawJasperAPIGetMethod
      - DrawJasperAPIPostMethod
      - DrawJasperAPIOptionsMethod
      - WhiskyAPIGetMethod
      - WhiskyAPIPostMethod
      - WhiskyAPIOptionsMethod
      - SaltLevelAPIGetMethod
      - SaltLevelAPIPostMethod
      - SaltLevelAPIOptionsMethod
      - CompareACNHAPIGetMethod
      - CompareACNHAPIPostMethod
      - CompareACNHAPIOptionsMethod
    Properties:
      RestApiId:
        Ref: RestAPI
      StageName: test

  RestAPICustomDomainName:
    Type: 'AWS::ApiGateway::DomainName'
    Properties:
      RegionalCertificateArn: !Sub "arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${ApiCertificateId}"
      DomainName: !Ref ApiUrl
      EndpointConfiguration:
        Types:
          - REGIONAL

  RestAPIBasePathMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Properties:
      BasePath: "v1"
      DomainName: !Ref RestAPICustomDomainName
      RestApiId: !Ref RestAPI
    DependsOn:
      - RestAPI

  RestAPIDNSRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref ApiUrl
      Type: A
      AliasTarget:
        DNSName: !GetAtt [RestAPICustomDomainName, RegionalDomainName]
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt [RestAPICustomDomainName, RegionalHostedZoneId]
      HostedZoneId: !Ref HostedZoneId

Outputs:
  ApiId:
    Value:
      Ref: RestAPI
  ApiUrl:
    Value:
      Ref: RestAPIDNSRecordSet

